/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package test;

import coneccion.*;
import java.sql.*;
import damain.ContadorID;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.IOException;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import static test.VGVAManual.idd;

/**
 *
 * @author Cesar
 */
public class VGAsistencia extends javax.swing.JFrame {

    Conexion conectar = Conexion.getInstance();

    public VGAsistencia() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setTitle("ESCANEAR");
        this.setVisible(true);
        regresar();
        escanearYActualizarTabla();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jbtnFinalizar = new javax.swing.JButton();
        jbtnManualA = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(108, 23, 43));
        jPanel1.setMinimumSize(new java.awt.Dimension(655, 425));

        jPanel2.setBackground(java.awt.Color.lightGray);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setText("ESCANEANDO");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(jLabel1)
                .addContainerGap(209, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addContainerGap(32, Short.MAX_VALUE))
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/BURRITO.png"))); // NOI18N

        jbtnFinalizar.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jbtnFinalizar.setText("Finalizar");

        jbtnManualA.setFont(new java.awt.Font("Times New Roman", 0, 14)); // NOI18N
        jbtnManualA.setText("Agregar Manualmente");
        jbtnManualA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnManualAActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(231, 231, 231)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(101, 101, 101)
                .addComponent(jbtnFinalizar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jbtnManualA)
                .addGap(82, 82, 82))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnFinalizar)
                    .addComponent(jbtnManualA))
                .addContainerGap(55, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void regresar() {
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    pantallaAnterior();
                }
            });
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void pantallaAnterior() {
        this.dispose();
        VGVer vVer = new VGVer();
        vVer.setVisible(true);
    }

    public void setValor(String grupo) {
        idd = -1;
        try {
            Connection conexion = conectar.conectar();
            String query = "SELECT id_grupo FROM Grupo WHERE grupo = ?";
            try (PreparedStatement preparedStatement = conexion.prepareStatement(query)) {
                preparedStatement.setString(1, grupo);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        idd = resultSet.getInt("id_grupo");
                    }
                }
            }
            conectar.cerrarConexion();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public int obtenerIdAlumnoPorBoleta(String boleta) {
        int idAlumno = -1;
        try {
            Connection conexion = conectar.conectar();
            String query = "SELECT id_alumno FROM Alumno WHERE boleta = ?";
            try (PreparedStatement preparedStatement = conexion.prepareStatement(query)) {
                preparedStatement.setString(1, boleta);
                try (ResultSet resultSet = preparedStatement.executeQuery()) {
                    if (resultSet.next()) {
                        idAlumno = resultSet.getInt("id_alumno");
                    }
                }
            }
            conectar.cerrarConexion();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return idAlumno;
    }

    private void insertarAsistencia(Connection conexion, int id_asistencia, int id_InfoAlumno) throws SQLException {
        String consultaAsistencia = "INSERT INTO Asistencia (id_asistencia, id_InfoAlumno, asistencia, fecha) VALUES (?, ?, 'x', CURRENT_DATE)";
        try (PreparedStatement pstmtAsistencia = conexion.prepareStatement(consultaAsistencia)) {
            pstmtAsistencia.setInt(1, id_asistencia);
            pstmtAsistencia.setInt(2, id_InfoAlumno);
            pstmtAsistencia.executeUpdate();
        }
    }

    private void actualizarIdAsistenciaEnInfoAlumno(Connection conexion, int id_asistencia, int id_InfoAlumno) throws SQLException {
        String consultaActualizarIdAsistencia = "UPDATE InfoAlumno SET id_asistencia = ? WHERE id_infoAlumno = ?";
        try (PreparedStatement pstmtActualizarIdAsistencia = conexion.prepareStatement(consultaActualizarIdAsistencia)) {
            pstmtActualizarIdAsistencia.setInt(1, id_asistencia);
            pstmtActualizarIdAsistencia.setInt(2, id_InfoAlumno);
            pstmtActualizarIdAsistencia.executeUpdate();
        }
    }

    private void agregarAlumnoAGrupo(Connection conexion, int id_boleta) throws SQLException {
        try {
            conexion.setAutoCommit(false); // Comienza la transacci√≥n

            if (!existeAlumnoEnGrupo(conexion, id_boleta, idd)) {
                int id_asistencia = ContadorID.obtenerMaxId(conectar, "asistencia") + 1;
                int id_InfoAlumno = ContadorID.obtenerMaxId(conectar, "InfoAlumno") + 1;
                insertarAsistencia(conexion, id_asistencia, id_InfoAlumno);

                String insertarInfoAlumno = "INSERT INTO infoAlumno (id_InfoAlumno, id_alumno, id_asistencia, id_grupo) VALUES (?,?,?,?)";
                try (PreparedStatement pstmtInsertar = conexion.prepareStatement(insertarInfoAlumno)) {
                    pstmtInsertar.setInt(1, id_InfoAlumno);
                    pstmtInsertar.setInt(2, id_boleta);
                    pstmtInsertar.setInt(3, id_asistencia);
                    pstmtInsertar.setInt(4, idd);
                    pstmtInsertar.executeUpdate();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            }

            conexion.commit(); // Confirma la transacci√≥n
            conexion.setAutoCommit(true); // Restaura el modo de autocommit
        } catch (SQLException e) {
            conexion.rollback(); // En caso de error, realiza un rollback
            e.printStackTrace();
        }
    }

    private void agregarNuevoAlumno(Connection conexion, String boleta, String nombreAlumno) throws SQLException {
        if (!existeAlumno(conexion, boleta)) {
            int opcion = JOptionPane.showConfirmDialog(null, "Alumno no existente \n ¬øDesea agregarlo?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                try {
                    String consultaInsertarAlumno = "INSERT INTO Alumno (id_alumno, nombre_completo, boleta) VALUES (?, ?, ?)";
                    try (PreparedStatement pstmtInsertarAlumno = conexion.prepareStatement(consultaInsertarAlumno)) {
                        int nuevoIdAlumno = ContadorID.obtenerMaxId(conectar, "alumno") + 1;
                        pstmtInsertarAlumno.setInt(1, nuevoIdAlumno);
                        pstmtInsertarAlumno.setString(2, nombreAlumno);
                        pstmtInsertarAlumno.setString(3, boleta);
                        pstmtInsertarAlumno.executeUpdate();

                        int id_asistencia = ContadorID.obtenerMaxId(conectar, "asistencia") + 1;
                        int id_InfoAlumno = ContadorID.obtenerMaxId(conectar, "InfoAlumno") + 1;
                        insertarAsistencia(conexion, id_asistencia, id_InfoAlumno);

                        String insertarInfoAlumno = "INSERT INTO infoAlumno (id_InfoAlumno, id_alumno, id_asistencia, id_grupo) VALUES (?,?,?,?)";
                        try (PreparedStatement pstmtInsertar = conexion.prepareStatement(insertarInfoAlumno)) {
                            pstmtInsertar.setInt(1, id_InfoAlumno);
                            pstmtInsertar.setInt(2, nuevoIdAlumno);
                            pstmtInsertar.setInt(3, id_asistencia);
                            pstmtInsertar.setInt(4, idd);
                            pstmtInsertar.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
            } else {

            }
        } else {
            JOptionPane.showMessageDialog(null, "El alumno ya existe en la base de datos.");
            int id_boleta = obtenerIdAlumnoPorBoleta(boleta);
            agregarAlumnoAGrupo(conexion, id_boleta);
        }
    }

    private boolean existeAlumno(Connection conexion, String boleta) {
        String consultaExisteAlumno = "SELECT COUNT(*) FROM Alumno WHERE boleta = ?";
        try (PreparedStatement pstmtExisteAlumno = conexion.prepareStatement(consultaExisteAlumno)) {
            pstmtExisteAlumno.setString(1, boleta);
            try (ResultSet resultSet = pstmtExisteAlumno.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt(1);
                    return count > 0;
                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        return false;
    }

    private boolean existeAlumnoEnGrupo(Connection conexion, int id_boleta, int id_grupo) throws SQLException {
        String consultaExisteAlumnoEnGrupo = "SELECT COUNT(*) FROM InfoAlumno WHERE id_alumno = ? AND id_grupo = ?";
        try (PreparedStatement pstmtExisteAlumnoEnGrupo = conexion.prepareStatement(consultaExisteAlumnoEnGrupo)) {
            pstmtExisteAlumnoEnGrupo.setInt(1, id_boleta);
            pstmtExisteAlumnoEnGrupo.setInt(2, id_grupo);
            try (ResultSet resultSet = pstmtExisteAlumnoEnGrupo.executeQuery()) {
                if (resultSet.next()) {
                    int count = resultSet.getInt(1);
                    return count > 0;
                }
            }
        }
        return false;
    }

    public void escanearYActualizarTabla(String url) {
        try {
            // Conecta y obt√©n el HTML de la p√°gina
            Document doc = Jsoup.connect(url).timeout(20000).get();

            // Busca el div con el nombre del alumno
            Element nombreDiv = doc.select("div.nombre").first();
            String nombre = nombreDiv.text();

            // Busca el div con la boleta del alumno
            Element boletaDiv = doc.select("div.boleta").first();
            String boleta = boletaDiv.text();

            // Resto del c√≥digo para obtener el id_boleta, id_grupo, y realizar operaciones en la base de datos
            int id_boleta = obtenerIdAlumnoPorBoleta(boleta);
            int id_grupo = idd;
            System.out.println("id_grupo = " + id_grupo);
            try (Connection conexion = conectar.conectar()) {
                String consultaInfoAlumno = "SELECT id_infoAlumno, id_alumno, id_grupo FROM InfoAlumno WHERE id_alumno = ?";

                try (PreparedStatement pstmtInfoAlumno = conexion.prepareStatement(consultaInfoAlumno)) {
                    pstmtInfoAlumno.setInt(1, id_boleta);

                    try (ResultSet resultadoInfoAlumno = pstmtInfoAlumno.executeQuery()) {
                        if (resultadoInfoAlumno.next()) {
                            int id_alumno = resultadoInfoAlumno.getInt("id_alumno");
                            int id_grupo_infoAlumno = resultadoInfoAlumno.getInt("id_grupo");

                            if (id_grupo_infoAlumno == id_grupo && id_boleta == id_alumno) {
                                int id_asistencia = ContadorID.obtenerMaxId(conectar, "asistencia") + 1;
                                int id_InfoAlumno = resultadoInfoAlumno.getInt("id_infoAlumno");

                                insertarAsistencia(conexion, id_asistencia, id_InfoAlumno);

                                actualizarIdAsistenciaEnInfoAlumno(conexion, id_asistencia, id_InfoAlumno);

                            } else {
                                int opcion = JOptionPane.showConfirmDialog(null, "Alumno no existente \n ¬øDesea agregarlo?", "Confirmaci√≥n", JOptionPane.YES_NO_OPTION);
                                if (opcion == JOptionPane.YES_OPTION) {
                                    agregarAlumnoAGrupo(conexion, id_boleta);
                                }
                            }
                        } else {
                            agregarNuevoAlumno(conexion, boleta, nombre);
                        }
                    }
                }
            } catch (Exception e) {
                e.printStackTrace();
            }

            System.out.println(nombre);
            System.out.println(boleta);

        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    public void escanearYActualizarTabla() {
        String[] urls = {
            "https://servicios.dae.ipn.mx/vcred/?h=af07dbbea1784830da72f4cecb5eca0c5eb945c51b6428d537269fc06df5c591",
            "https://servicios.dae.ipn.mx/vcred/?h=963eea691405fa5c41104cbd2e1729ddd0588f2b36ef02a3ccf4e2fe412fb04a",
            "https://servicios.dae.ipn.mx/vcred/?h=c92fa41372f982e9dca8dd5279d716d22a455294d25ca7478538a0ab7a42a48",
            "https://servicios.dae.ipn.mx/vcred/?h=482acbf3777c163de4f71ad1fc8236f6c051f771d0b603415cb06acbec7ba0f3",
            "https://servicios.dae.ipn.mx/vcred/?h=6a7a85df84680cfc8cc4d1bad923bd7d58dfd9e591b1723dc7bef59b69cd7892",
            "https://servicios.dae.ipn.mx/vcred/?h=1254d859a618aa487739e4497b9cd79f507727edc9a3723eaa3e32534f892d0c",
            "https://servicios.dae.ipn.mx/vcred/?h=ab63b236108f9eb726bd39d02c25dc1c09eb8b368c6ddd4ae0c8bdef86622c09",
            "https://servicios.dae.ipn.mx/vcred/?h=d3ef137d3134699d177f68391da5af68b260b340d2e879d58050e3a8a91ade1a",
            "https://servicios.dae.ipn.mx/vcred/?h=21b5a3a7eae520f62028809d9c2ab2746b50db7c58688804e2fd4017f443f439",
            "https://servicios.dae.ipn.mx/vcred/?h=e46844f94daed102ba49c663e4e3a4c4152f50ad14ba5a534c0ceaaa49d7e105"
        };
        for (String url : urls) {
            escanearYActualizarTabla(url);
        }
    }


    private void jbtnManualAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnManualAActionPerformed
        // TODO add your handling code here:
        VGVAManual manual = new VGVAManual();
        manual.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jbtnManualAActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(VGAsistencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(VGAsistencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(VGAsistencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(VGAsistencia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VGAsistencia().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JButton jbtnFinalizar;
    private javax.swing.JButton jbtnManualA;
    // End of variables declaration//GEN-END:variables
}
